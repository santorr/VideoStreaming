name: Build and Deploy Docker Image to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_NAME: website
  PROJECT_DIR: ~/projects/website
  DOCKER_DIR: docker

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Clone the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Build Docker image locally from Dockerfile
      - name: Build Docker image
        run: docker build -t ${{ env.PROJECT_NAME }} .

      # Export Docker image to a tar archive inside the docker folder
      - name: Export Docker image as tar
        run: |
          mkdir -p ${{ env.DOCKER_DIR }}
          docker save ${{ env.PROJECT_NAME }} -o ${{ env.DOCKER_DIR }}/${{ env.PROJECT_NAME }}.tar

      # Clean up the old tar file on the VPS before upload
      - name: Clean old tar on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: "${{ secrets.VPS_HOST }}"
          username: "${{ secrets.VPS_USER }}"
          key: "${{ secrets.VPS_SSH_KEY }}"
          port: "${{ secrets.VPS_PORT }}"
          script: |
            rm -f ${{ env.PROJECT_DIR }}/${{ env.DOCKER_DIR }}/${{ env.PROJECT_NAME }}.tar

      # Upload the new Docker image tarball to the VPS
      - name: Copy image to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: "${{ secrets.VPS_HOST }}"
          username: "${{ secrets.VPS_USER }}"
          key: "${{ secrets.VPS_SSH_KEY }}"
          port: "${{ secrets.VPS_PORT }}"
          source: "${{ env.DOCKER_DIR }}/${{ env.PROJECT_NAME }}.tar"
          target: "${{ env.PROJECT_DIR }}/${{ env.DOCKER_DIR }}/"

      # Load the image and restart the Docker container on the VPS
      - name: Load and run image on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: "${{ secrets.VPS_HOST }}"
          username: "${{ secrets.VPS_USER }}"
          key: "${{ secrets.VPS_SSH_KEY }}"
          port: "${{ secrets.VPS_PORT }}"
          script: |
            cd ${{ env.PROJECT_DIR }}/${{ env.DOCKER_DIR }}
            docker load -i ${{ env.PROJECT_NAME }}.tar

            # Stop and remove existing container if it exists
            docker stop ${{ env.PROJECT_NAME }} || true
            docker rm ${{ env.PROJECT_NAME }} || true

            # Start new container with volume mount for video files
            docker run -d --name ${{ env.PROJECT_NAME }} -p 80:80 \
              -v ${{ env.PROJECT_DIR }}/videos:/usr/local/apache2/htdocs/videos \
              ${{ env.PROJECT_NAME }}
